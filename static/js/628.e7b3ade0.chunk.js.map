{"version":3,"file":"static/js/628.e7b3ade0.chunk.js","mappings":"sPAGO,SAAeA,IAAtB,4CAAO,OAAP,oBAAO,6GAEiBC,EAAAA,EAAAA,IAAA,SAFjB,cAEGC,EAFH,yBAGIA,GAHJ,gCAKHC,QAAQC,MAAR,MALG,gFAFPH,EAAAA,EAAAA,SAAAA,QAAyB,mDAUlB,IAAMI,EAAS,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,kBAEDL,EAAAA,EAAAA,IAAA,sBAAyBK,EAAzB,aAFC,cAEfJ,EAFe,yBAGdA,GAHc,gCAKrBC,QAAQI,IAAI,KAAEC,SALO,yDAAH,qDAQf,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAyBC,EAAIC,GAA7B,gGAEgBV,EAAAA,EAAAA,IAAA,gBAAmBS,GAAM,CAAEE,UAAWD,IAFtD,cAEGE,EAFH,yBAGIA,GAHJ,gCAKHV,QAAQC,MAAR,MALG,gF,aChBMU,EAAa,SAAC,GAAc,IAAZD,EAAW,EAAXA,KACrBE,EAAkCF,EAAlCE,OAAQC,EAA0BH,EAA1BG,OAAQJ,EAAkBC,EAAlBD,UAAWF,EAAOG,EAAPH,GAEjC,GAAkCO,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8CF,EAAAA,EAAAA,UAASL,GAAvD,eAAOQ,EAAP,KAAwBC,EAAxB,KAEMC,EAAa,mCAAG,sFACfJ,GAMHG,EADgBT,GAEhBO,GAAa,KANTI,EAAaX,GAAa,EAC9BS,EAAmBE,GACnBJ,GAAa,IAMTV,EAVc,mCAUF,WAAMG,GAAN,0FAERY,EAAcd,EAAIE,GAFV,sDAIdT,QAAQI,IAAR,MAJc,wDAVE,sDAiBpBE,EAAUG,GAjBU,2CAAH,qDAmCnB,OAfAa,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcC,aAAaC,QAAb,gBAA8BlB,IAClD,GAAoB,OAAhBgB,EAAsB,CACxB,IAAMG,EAAeC,KAAKC,MAAML,GAChCP,EAAaU,EAAaX,WAC1BG,EAAmBQ,EAAaT,gBACjC,CACF,GAAE,CAACV,KAEJe,EAAAA,EAAAA,YAAU,WACR,IAAMO,EAAc,CAAEtB,GAAAA,EAAIQ,UAAAA,EAAWE,gBAAAA,GAErCO,aAAaM,QAAb,gBAA8BvB,GAAMoB,KAAKI,UAAUF,GACpD,GAAE,CAACtB,EAAIQ,EAAWE,KAGjB,2BACE,4BACE,gBAAKe,I,y+BAAWC,IAAI,UAEpB,gBAAKD,IAAKpB,EAAQsB,MAAM,QAAQD,IAAI,iBACpC,2BACE,yBACE,yBAAIpB,EAAJ,gBAEF,yBACE,yBAAII,EAAJ,yBAIN,mBAAQkB,KAAK,SAASC,QAASjB,EAA/B,SACGJ,EAAY,YAAc,aAIlC,EC/DYsB,EAAa,SAAC,GAAe,IAAbtC,EAAY,EAAZA,MAC3B,OACE,+BAEI,wBACGA,EAAMuC,KAAI,SAAA5B,GAAI,OACb,SAACC,EAAD,CAA0BD,KAAMA,GAAfA,EAAKH,GADT,OAOxB,ECwCD,EAjDe,WACb,OAAgCO,EAAAA,EAAAA,WAAS,GAAzC,eAAOyB,EAAP,KAAiBC,EAAjB,KACA,GAA0B1B,EAAAA,EAAAA,UAAS,IAAnC,eAAOf,EAAP,KAAc0C,EAAd,KACA,GAAwB3B,EAAAA,EAAAA,UAAS,GAAjC,eAAOX,EAAP,KAAauC,EAAb,KACA,GAA0B5B,EAAAA,EAAAA,UAAS,GAAnC,eAAO6B,EAAP,KAAcC,EAAd,MAEAtB,EAAAA,EAAAA,YAAU,WACR,IAAMzB,EAAY,mCAAG,+GAEMwB,IAFN,gBAETwB,EAFS,EAETA,KACRD,EAASC,EAAKC,OAAS,GAHN,gDAKjB9C,QAAQI,IAAR,MALiB,yDAAH,qDAQlBP,GACD,GAAE,IAEH,IAAMkD,EAAe,mCAAG,sGAEpBL,GAAQ,SAAAM,GAAS,OAAIA,EAAY,CAAhB,IAFG,SAGG3B,EAAclB,GAHjB,gBAGZ0C,EAHY,EAGZA,KACRJ,GAAS,SAAAO,GAAS,wBAAQA,IAAR,OAAsBH,GAAtB,IAJE,gDAMpB7C,QAAQI,IAAR,MANoB,yDAAH,qDAuBrB,OAbAkB,EAAAA,EAAAA,YAAU,WACR,IAAMpB,EAAS,mCAAG,+GAESmB,IAFT,gBAENwB,EAFM,EAENA,KACRJ,EAASI,GACTL,GAAY,GAJE,gDAMdxC,QAAQI,IAAR,MANc,yDAAH,qDASfF,GACD,GAAE,KAGD,2BACGqC,IAAY,SAACF,EAAD,CAAYtC,MAAOA,IAC/B4C,GAASxC,IAAQ,mBAAQiC,QAASW,EAAjB,yBAGvB,C","sources":["components/services/api.js","components/TweetsItem/TweetsItem.js","components/TweetsList/TweetsList.js","pages/Tweets.js"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://644294cc33997d3ef9143f2a.mockapi.io/api/';\n\nexport async function getAllTweets() {\n  try {\n    const users = await axios.get(`users`);\n    return users;\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport const getTweets = async (page = 1) => {\n  try {\n    const users = await axios.get(`/users?page=${page}&limit=3`);\n    return users;\n  } catch (e) {\n    console.log(e.message);\n  }\n};\nexport async function putFollow(id, value) {\n  try {\n    const user = await axios.put(`users/${id}`, { followers: value });\n    return user;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import { useEffect, useState } from 'react';\nimport logo from '../../images/logo.png';\nimport * as api from '../services/api';\nexport const TweetsItem = ({ user }) => {\n  let { avatar, tweets, followers, id } = user;\n\n  const [following, setFollowing] = useState(false);\n  const [updateFollowers, setUpdateFollowers] = useState(followers);\n\n  const onClickFollow = async () => {\n    if (!following) {\n      let increment = (followers += 1);\n      setUpdateFollowers(increment);\n      setFollowing(true);\n    } else {\n      let prevState = followers;\n      setUpdateFollowers(prevState);\n      setFollowing(false);\n    }\n    const putFollow = async followers => {\n      try {\n        await api.putFollow(id, followers);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    putFollow(followers);\n  };\n\n  useEffect(() => {\n    const savedFollow = localStorage.getItem(`follow${id}`);\n    if (savedFollow !== null) {\n      const parsedFollow = JSON.parse(savedFollow);\n      setFollowing(parsedFollow.following);\n      setUpdateFollowers(parsedFollow.updateFollowers);\n    }\n  }, [id]);\n\n  useEffect(() => {\n    const followArray = { id, following, updateFollowers };\n\n    localStorage.setItem(`follow${id}`, JSON.stringify(followArray));\n  }, [id, following, updateFollowers]);\n\n  return (\n    <li>\n      <div>\n        <img src={logo} alt=\"logo\" />\n\n        <img src={avatar} width=\"100px\" alt=\"user-avatar\" />\n        <ul>\n          <li>\n            <p>{tweets} tweets</p>\n          </li>\n          <li>\n            <p>{updateFollowers} followers</p>\n          </li>\n        </ul>\n      </div>\n      <button type=\"button\" onClick={onClickFollow}>\n        {following ? 'Following' : 'Follow'}\n      </button>\n    </li>\n  );\n};\n","import { TweetsItem } from 'components/TweetsItem/TweetsItem';\nexport const TweetsList = ({ users }) => {\n  return (\n    <>\n      {\n        <ul>\n          {users.map(user => (\n            <TweetsItem key={user.id} user={user} />\n          ))}\n        </ul>\n      }\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport * as api from '../components/services/api';\nimport { TweetsList } from 'components/TweetsList/TweetsList';\n\nconst Tweets = () => {\n  const [notEmpty, setNotEmpty] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [page, setPage] = useState(2);\n  const [pages, setPages] = useState(1);\n\n  useEffect(() => {\n    const getAllTweets = async () => {\n      try {\n        const { data } = await api.getAllTweets();\n        setPages(data.length / 3);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getAllTweets();\n  }, []);\n\n  const onClickLoadMore = async () => {\n    try {\n      setPage(prevState => prevState + 1);\n      const { data } = await api.getTweets(page);\n      setUsers(prevState => [...prevState, ...data]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const getTweets = async () => {\n      try {\n        const { data } = await api.getTweets();\n        setUsers(data);\n        setNotEmpty(true);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getTweets();\n  }, []);\n\n  return (\n    <div>\n      {notEmpty && <TweetsList users={users} />}\n      {pages >= page && <button onClick={onClickLoadMore}>Load More</button>}\n    </div>\n  );\n};\n\nexport default Tweets;\n"],"names":["getAllTweets","axios","users","console","error","getTweets","page","log","message","putFollow","id","value","followers","user","TweetsItem","avatar","tweets","useState","following","setFollowing","updateFollowers","setUpdateFollowers","onClickFollow","increment","api","useEffect","savedFollow","localStorage","getItem","parsedFollow","JSON","parse","followArray","setItem","stringify","src","alt","width","type","onClick","TweetsList","map","notEmpty","setNotEmpty","setUsers","setPage","pages","setPages","data","length","onClickLoadMore","prevState"],"sourceRoot":""}
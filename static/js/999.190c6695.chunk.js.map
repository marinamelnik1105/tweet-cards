{"version":3,"file":"static/js/999.190c6695.chunk.js","mappings":"sPAGO,SAAeA,IAAtB,4CAAO,OAAP,oBAAO,6GAEiBC,EAAAA,EAAAA,IAAA,SAFjB,cAEGC,EAFH,yBAGIA,GAHJ,gCAKHC,QAAQC,MAAR,MALG,gFAFPH,EAAAA,EAAAA,SAAAA,QAAyB,mDAUlB,IAAMI,EAAS,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,kBAEDL,EAAAA,EAAAA,IAAA,sBAAyBK,EAAzB,aAFC,cAEfJ,EAFe,yBAGdA,GAHc,gCAKrBC,QAAQI,IAAI,KAAEC,SALO,yDAAH,qD,aCVTC,EAAa,SAAC,GAAe,IAAbP,EAAY,EAAZA,MAC3B,OACE,+BAEI,wBACGA,EAAMQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,OAAQC,EAAvB,EAAuBA,UAAvB,OACT,2BACE,4BACE,gBAAKC,I,y+BAAWC,IAAI,UAEpB,gBAAKD,IAAKH,EAAQK,MAAM,QAAQD,IAAI,iBACpC,2BACE,yBACE,yBAAIH,EAAJ,gBAEF,yBACE,yBAAIC,EAAJ,yBAIN,mBAAQI,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIjB,QAAQI,IAAIa,EAAhB,EAAhC,sBAdOT,EADA,OAwBpB,ECuBD,EAjDe,WACb,OAAgCU,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOnB,EAAP,KAAcsB,EAAd,KACA,GAAwBH,EAAAA,EAAAA,UAAS,GAAjC,eAAOf,EAAP,KAAamB,EAAb,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAM5B,EAAY,mCAAG,+GAEM6B,IAFN,gBAETC,EAFS,EAETA,KACRH,EAASG,EAAKC,OAAS,GAHN,gDAKjB5B,QAAQI,IAAR,MALiB,yDAAH,qDAQlBP,GACD,GAAE,IAEH,IAAMgC,EAAe,mCAAG,sGAEpBP,GAAQ,SAAAQ,GAAS,OAAIA,EAAY,CAAhB,IAFG,SAGGJ,EAAcvB,GAHjB,gBAGZwB,EAHY,EAGZA,KACRN,GAAS,SAAAS,GAAS,wBAAQA,IAAR,OAAsBH,GAAtB,IAJE,gDAMpB3B,QAAQI,IAAR,MANoB,yDAAH,qDAuBrB,OAbAqB,EAAAA,EAAAA,YAAU,WACR,IAAMvB,EAAS,mCAAG,+GAESwB,IAFT,gBAENC,EAFM,EAENA,KACRN,EAASM,GACTP,GAAY,GAJE,gDAMdpB,QAAQI,IAAR,MANc,yDAAH,qDASfF,GACD,GAAE,KAGD,2BACGiB,IAAY,SAACb,EAAD,CAAYP,MAAOA,IAC/BwB,GAASpB,IAAQ,mBAAQa,QAASa,EAAjB,yBAGvB,C","sources":["components/services/api.js","components/TweetsList/TweetsList.js","pages/Tweets.js"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://644294cc33997d3ef9143f2a.mockapi.io/api/';\n\nexport async function getAllTweets() {\n  try {\n    const users = await axios.get(`users`);\n    return users;\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport const getTweets = async (page = 1) => {\n  try {\n    const users = await axios.get(`/users?page=${page}&limit=3`);\n    return users;\n  } catch (e) {\n    console.log(e.message);\n  }\n};\nexport async function putFollow({ id, value }) {\n  try {\n    const users = await axios.put(`users/${id}`, { followers: value });\n    return users;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import logo from '../../images/logo.png';\nexport const TweetsList = ({ users }) => {\n  return (\n    <>\n      {\n        <ul>\n          {users.map(({ id, avatar, tweets, followers }) => (\n            <li key={id}>\n              <div>\n                <img src={logo} alt=\"logo\" />\n\n                <img src={avatar} width=\"100px\" alt=\"user-avatar\" />\n                <ul>\n                  <li>\n                    <p>{tweets} tweets</p>\n                  </li>\n                  <li>\n                    <p>{followers} followers</p>\n                  </li>\n                </ul>\n              </div>\n              <button type=\"button\" onClick={e => console.log(e)}>\n                Follow\n              </button>\n            </li>\n          ))}\n        </ul>\n      }\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport * as api from '../components/services/api';\nimport { TweetsList } from 'components/TweetsList/TweetsList';\n\nconst Tweets = () => {\n  const [notEmpty, setNotEmpty] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [page, setPage] = useState(2);\n  const [pages, setPages] = useState(1);\n\n  useEffect(() => {\n    const getAllTweets = async () => {\n      try {\n        const { data } = await api.getAllTweets();\n        setPages(data.length / 3);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getAllTweets();\n  }, []);\n\n  const onClickLoadMore = async () => {\n    try {\n      setPage(prevState => prevState + 1);\n      const { data } = await api.getTweets(page);\n      setUsers(prevState => [...prevState, ...data]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const getTweets = async () => {\n      try {\n        const { data } = await api.getTweets();\n        setUsers(data);\n        setNotEmpty(true);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getTweets();\n  }, []);\n\n  return (\n    <div>\n      {notEmpty && <TweetsList users={users} />}\n      {pages >= page && <button onClick={onClickLoadMore}>Load More</button>}\n    </div>\n  );\n};\n\nexport default Tweets;\n"],"names":["getAllTweets","axios","users","console","error","getTweets","page","log","message","TweetsList","map","id","avatar","tweets","followers","src","alt","width","type","onClick","e","useState","notEmpty","setNotEmpty","setUsers","setPage","pages","setPages","useEffect","api","data","length","onClickLoadMore","prevState"],"sourceRoot":""}